/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.monitoring.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.monitoring.model.Metric;
import com.liferay.monitoring.model.MetricModel;
import com.liferay.monitoring.model.MetricSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Metric service. Represents a row in the &quot;Metric&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.monitoring.model.MetricModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetricImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MetricImpl
 * @see com.liferay.monitoring.model.Metric
 * @see com.liferay.monitoring.model.MetricModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MetricModelImpl extends BaseModelImpl<Metric>
	implements MetricModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metric model instance should use the {@link com.liferay.monitoring.model.Metric} interface instead.
	 */
	public static final String TABLE_NAME = "Metric";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "metricId", Types.BIGINT },
			{ "metricName", Types.VARCHAR },
			{ "metricValue", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Metric (uuid_ VARCHAR(75) null,metricId LONG not null primary key,metricName VARCHAR(75) null,metricValue LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Metric";
	public static final String ORDER_BY_JPQL = " ORDER BY metric.metricId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Metric.metricId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.monitoring.model.Metric"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.monitoring.model.Metric"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.monitoring.model.Metric"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long METRICID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Metric toModel(MetricSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Metric model = new MetricImpl();

		model.setUuid(soapModel.getUuid());
		model.setMetricId(soapModel.getMetricId());
		model.setMetricName(soapModel.getMetricName());
		model.setMetricValue(soapModel.getMetricValue());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Metric> toModels(MetricSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Metric> models = new ArrayList<Metric>(soapModels.length);

		for (MetricSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.monitoring.model.Metric"));

	public MetricModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metricId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetricId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metricId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Metric.class;
	}

	@Override
	public String getModelClassName() {
		return Metric.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("metricId", getMetricId());
		attributes.put("metricName", getMetricName());
		attributes.put("metricValue", getMetricValue());
		attributes.put("createDate", getCreateDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long metricId = (Long)attributes.get("metricId");

		if (metricId != null) {
			setMetricId(metricId);
		}

		String metricName = (String)attributes.get("metricName");

		if (metricName != null) {
			setMetricName(metricName);
		}

		Long metricValue = (Long)attributes.get("metricValue");

		if (metricValue != null) {
			setMetricValue(metricValue);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMetricId() {
		return _metricId;
	}

	@Override
	public void setMetricId(long metricId) {
		_metricId = metricId;
	}

	@JSON
	@Override
	public String getMetricName() {
		if (_metricName == null) {
			return StringPool.BLANK;
		}
		else {
			return _metricName;
		}
	}

	@Override
	public void setMetricName(String metricName) {
		_metricName = metricName;
	}

	@JSON
	@Override
	public long getMetricValue() {
		return _metricValue;
	}

	@Override
	public void setMetricValue(long metricValue) {
		_metricValue = metricValue;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Metric.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Metric toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Metric)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetricImpl metricImpl = new MetricImpl();

		metricImpl.setUuid(getUuid());
		metricImpl.setMetricId(getMetricId());
		metricImpl.setMetricName(getMetricName());
		metricImpl.setMetricValue(getMetricValue());
		metricImpl.setCreateDate(getCreateDate());

		metricImpl.resetOriginalValues();

		return metricImpl;
	}

	@Override
	public int compareTo(Metric metric) {
		long primaryKey = metric.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Metric)) {
			return false;
		}

		Metric metric = (Metric)obj;

		long primaryKey = metric.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MetricModelImpl metricModelImpl = this;

		metricModelImpl._originalUuid = metricModelImpl._uuid;

		metricModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Metric> toCacheModel() {
		MetricCacheModel metricCacheModel = new MetricCacheModel();

		metricCacheModel.uuid = getUuid();

		String uuid = metricCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			metricCacheModel.uuid = null;
		}

		metricCacheModel.metricId = getMetricId();

		metricCacheModel.metricName = getMetricName();

		String metricName = metricCacheModel.metricName;

		if ((metricName != null) && (metricName.length() == 0)) {
			metricCacheModel.metricName = null;
		}

		metricCacheModel.metricValue = getMetricValue();

		Date createDate = getCreateDate();

		if (createDate != null) {
			metricCacheModel.createDate = createDate.getTime();
		}
		else {
			metricCacheModel.createDate = Long.MIN_VALUE;
		}

		return metricCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", metricId=");
		sb.append(getMetricId());
		sb.append(", metricName=");
		sb.append(getMetricName());
		sb.append(", metricValue=");
		sb.append(getMetricValue());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.monitoring.model.Metric");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metricId</column-name><column-value><![CDATA[");
		sb.append(getMetricId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metricName</column-name><column-value><![CDATA[");
		sb.append(getMetricName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metricValue</column-name><column-value><![CDATA[");
		sb.append(getMetricValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Metric.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Metric.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _metricId;
	private String _metricName;
	private long _metricValue;
	private Date _createDate;
	private long _columnBitmask;
	private Metric _escapedModel;
}